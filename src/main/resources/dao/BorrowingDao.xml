<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.smit.library.dao.BorrowingDao">

    <resultMap id="borrowingMapper" type="com.smit.library.model.Borrowing">
        <result property="borrowingId" column="borrowing_id"/>
        <result property="borrower_id" column="borrowerId"/>
        <result property="email" column="borrowerEmail"/>
        <result property="name" column="borrowerName"/>
        <result property="book_id" column="bookId"/>
        <result property="isbn" column="bookISBN"/>
        <result property="heading" column="bookHeading"/>
        <result property="author" column="bookAuthor"/>
        <result property="overdue_days" column="overdueDays"/>
        <result property="borrow_date" column="borrowDate"/>
        <result property="estimated_return_date" column="estimatedReturnDate"/>
        <result property="return_date" column="returnDate"/>
    </resultMap>

    <insert id="insertNewBorrowing" parameterType="com.smit.library.model.Borrowing"
            useGeneratedKeys="true" keyProperty="borrowing.borrowingId"
            keyColumn="borrowing_id">
    INSERT INTO library.library_borrowing (borrowet_id, book_id, estimated_return_date)
    VALUES (#{borrowing.borrowerId}, #{borrowing.bookId}, #{borrowing.estimatedReturnDate})
    </insert>

    <update id="setBorrowingReturned" parameterType="com.smit.library.model.Borrowing">
        UPDATE library.library_borrowing
        SET library.library_borrowing.return_date = #{borrowing.returnDate}
        WHERE library.library_borrowing.borrowing_id = #{borrowing.borrowingId}
    </update>

    <select id="getOverdueBorrowings" resultMap="borrowingMapper">
        SELECT borrowing.borrowing_id,
               borrower.borrower_id,
               borrower.name,
               borrower.email,
               book.book_id,
               book.isbn,
               book.heading,
               concat(substring(book.author_name from 1 for 2), '. ', book.author_surname) AS author,
               (CASE
                    WHEN borrowing.return_date IS NOT NULL AND borrowing.return_date > borrowing.estimated_return_date
                        THEN borrowing.return_date - borrowing.estimated_return_date
                    ELSE CURRENT_DATE - borrowing.estimated_return_date
                    END
                ) AS overdue_days,
               borrowing.borrow_date,
               borrowing.estimated_return_date,
               borrowing.return_date
        FROM library.library_borrowing AS borrowing
            INNER JOIN library.library_borrower AS borrower
                ON borrowing.borrower_id = borrower.borrower_id
            INNER JOIN library.library_book AS book
                ON borrowing.book_id = book.book_id
        WHERE borrowing.return_date IS NULL
           OR CURRENT_DATE > borrowing.estimated_return_date
        ORDER BY borrowing.estimated_return_date
    </select>

    <select id="getAllBorrowings" resultMap="borrowingMapper">
        SELECT borrowing.borrowing_id,
               borrower.borrower_id,
               borrower.name,
               borrower.email,
               book.book_id,
               book.isbn,
               book.heading,
               concat(substring(book.author_name from 1 for 2), '. ', book.author_surname) AS author,
               (CASE
                    WHEN borrowing.return_date IS NOT NULL AND borrowing.return_date > borrowing.estimated_return_date
                        THEN borrowing.return_date - borrowing.estimated_return_date
                    WHEN CURRENT_DATE > borrowing.estimated_return_date
                        THEN CURRENT_DATE - borrowing.estimated_return_date
                    ELSE 0
                    END
                ) AS overdue_days,
               borrowing.borrow_date,
               borrowing.estimated_return_date,
               borrowing.return_date
        FROM library.library_borrowing AS borrowing
                 INNER JOIN library.library_borrower AS borrower
                            ON borrowing.borrower_id = borrower.borrower_id
                 INNER JOIN library.library_book AS book
                            ON borrowing.book_id = book.book_id
        ORDER BY borrowing.estimated_return_date
    </select>

</mapper>